version: '3.3'

services:
  ################################################
  ####        Traefik Proxy Setup           #####
  ###############################################
  traefik: # Maybe this whole thing can be decoupled in other docker-compose file, use the same network and all containers should run under traefik
    image: traefik:v2.0
    restart: always
    container_name: traefik
    ports:
      - "80:80" # <== http
      - "8080:8080" # <== :8080 is where the dashboard runs on
      # - "443:443" # <== https
    command:
    #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      # - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      # - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      # - --certificatesresolvers.mytlschallenge.acme.email=theafkdeveloper@gmail.com # <== Setting email for certs
      # - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      # - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      # - ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
    networks:
      - web # <== Placing traefik on the network named web, to access containers on this network
    labels:
    #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`monitor.example.com`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access

  ################################################
  ####          MariaDB Container         ######
  ##############################################
  db_m2:
    image: nosto/mariadb:10.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: magento2_db
    networks:
      - backend

  ################################################
  ####          RabbitMQ Container         ######
  ##############################################
  rabbitmq_m2:
    image: rabbitmq:3.7-management
    hostname: magento2.dev.nos.to # Your Magento 2 installation host
    container_name: rabbitmq_m2
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672" # For management
    networks:
      - web
      - backend

  ################################################
  ####       Elastic Search Container      ######
  ##############################################
  es_m2:
    image: elasticsearch:6.8.4
    environment:
      discovery.type: single-node
    networks:
      - web
      - backend  

  # Magento 2 container
  magento2:
    build:
      context: ./magento2
      dockerfile: ./Dockerfile
    links:
      - db_m2
      - rabbitmq_m2
      - es_m2
    ports:
      # - 80:80
      - 9002:9002 #XDebug
    extra_hosts:
      my.dev.nos.to: 192.168.65.2
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.nginx-web.rule=Host(`magento2.dev.nos.to`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.nginx-web.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      # - "traefik.http.routers.nginx-web.middlewares=redirect@file" # <== This is a middleware to redirect to https
      # - "traefik.http.routers.nginx-secured.rule=Host(`magento2.dev.nos.to`)" # <== Your Domain Name for the https rule 
      # - "traefik.http.routers.nginx-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      # - "traefik.http.routers.nginx-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
    networks:
      - web
      - backend
    volumes:
      - type: bind
        source: ./nosto-magento2
        target: /var/www/html/magento2/app/code/Nosto/Tagging
      # - type: bind
      #   source: ./magento-root
      #   target: /var/www/html/magento2/ # For some reason, when you mount like this, it doesn't copy everything and fails the container building phase. Maybe using :delegate would fix it.
      
      # - type: bind
      #   source: ./nosto-magento2/vendor/magento
      #   target: /var/www/html/magento2/generated
      # Mage logs mounted to local. Not needed if we manage to mount the whole installation
      # - type: bind
      #   source: ./log
      #   target: /var/www/html/magento2/var/log/

    environment:
      COMPOSER_AUTH: "{\"http-basic\":{\"repo.magento.com\":{\"username\":\"\",\"password\":\"\"}}}"
      MYSQL_HOST: db_m2
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: magento2_db
      RABBITMQ_HOST: rabbitmq_m2
      VIRTUAL_HOST: magento2.dev.nos.to
      ES_HOST: es_m2
      ADMIN_USER: admin
      ADMIN_PASSWORD: Admin12345
      # Use the env vars bellow to point to your local or staging play instance
      NOSTO_SERVER_URL: connect.my.dev.nos.to
      NOSTO_API_BASE_URL: http://host.docker.internal:9000/api
      NOSTO_OAUTH_BASE_URL: https://my.dev.nos.to/oauth
      NOSTO_WEB_HOOK_BASE_URL: https://my.dev.nos.to
      NOSTO_IFRAME_ORIGIN: https://my.dev.nos.to
      NOSTO_IFRAME_ORIGIN_REGEXP: .*
      PHP_IDE_CONFIG: serverName=magento2.dev.nos.to

networks:
  web:
    external: true
  backend:
    external: false
    
volumes:
  db:
    external: true
